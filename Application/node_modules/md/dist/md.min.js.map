{"version":3,"file":"md.min.js","sources":["../src/utils.js","../node_modules/slugo/dist/slugo.js","../src/renderer.js","../src/defaults.js","../src/inline-rules.js","../src/inline-lexer.js","../src/parser.js","../src/block-rules.js","../src/lexer.js","../src/index.js"],"sourcesContent":["function merge(obj) {\n  let i = 1\n  let target\n  let key\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i]\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key]\n      }\n    }\n  }\n\n  return obj\n}\n\nfunction noop() {}\nnoop.exec = noop\n\nfunction escape(html, encode) {\n  return html\n    .replace(encode ? /&/g : /&(?!#?\\w+;)/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;')\n}\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/g, (_, n) => {\n    n = n.toLowerCase()\n    if (n === 'colon') return ':'\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(Number(n.substring(1)))\n    }\n    return ''\n  })\n}\n\nfunction replace(regex, opt) {\n  regex = regex.source\n  opt = opt || ''\n  return function self(name, val) {\n    if (!name) return new RegExp(regex, opt)\n    val = val.source || val\n    val = val.replace(/(^|[^\\[])\\^/g, '$1')\n    regex = regex.replace(name, val)\n    return self\n  }\n}\n\nexport { merge, noop, escape, unescape, replace }\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.slugo = factory());\n}(this, (function () { 'use strict';\n\nvar index = function (input) {\n  return input\n    // Remove html tags\n    .replace(/<(?:.|\\n)*?>/gm, '')\n    // Remove special characters\n    .replace(/[!\\\"#$%&'\\(\\)\\*\\+,\\/:;<=>\\?\\@\\[\\\\\\]\\^`\\{\\|\\}~]/g, '') // eslint-disable-line no-useless-escape\n    // Replace dots and spaces with a sepeator\n    .replace(/(\\s|\\.)/g, '-')\n    // Make the whole thing lowercase\n    .toLowerCase()\n};\n\nreturn index;\n\n})));\n","import slugo from 'slugo'\nimport { escape, unescape } from './utils'\n\nconst highlightLinesRe = /{([\\d,-]+)}/\n\nexport default class Renderer {\n  constructor(options) {\n    this.options = options || {}\n    this._headings = []\n  }\n\n  code(code, lang, escaped) {\n    let dataLine = ''\n    if (this.options.dataLine && lang && highlightLinesRe.test(lang)) {\n      dataLine = ` data-line=\"${highlightLinesRe.exec(lang)[1]}\"`\n      lang = lang.substr(0, lang.indexOf('{'))\n    }\n\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang)\n      if (out !== null && out !== code) {\n        escaped = true\n        code = out\n      }\n    }\n\n    if (!lang) {\n      return `<pre${dataLine}><code>${escaped\n        ? code\n        : escape(code, true)}\\n</code></pre>`\n    }\n\n    return `<pre${dataLine}><code class=\"${this.options.langPrefix}${escape(\n      lang,\n      true\n    )}\">${escaped ? code : escape(code, true)}\\n</code></pre>\\n`\n  }\n\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`\n  }\n\n  html(html) {\n    return html\n  }\n\n  heading(text, level, raw) {\n    let slug = slugo(raw)\n    const count = this._headings.filter(h => h === raw).length\n    if (count > 0) {\n      slug += `-${count}`\n    }\n    this._headings.push(raw)\n    return `<h${level} id=\"${this.options\n      .headerPrefix}${slug}\">${text}</h${level}>\\n`\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n'\n  }\n\n  list(body, ordered, taskList) {\n    const type = ordered ? 'ol' : 'ul'\n    const classNames = taskList ? ' class=\"task-list\"' : ''\n    return `<${type}${classNames}>\\n${body}</${type}>\\n`\n  }\n\n  listitem(text, checked) {\n    if (checked === undefined) {\n      return `<li>${text}</li>\\n`\n    }\n\n    return (\n      '<li class=\"task-list-item\">' +\n      '<input type=\"checkbox\" class=\"task-list-item-checkbox\"' +\n      (checked ? ' checked' : '') +\n      '> ' +\n      text +\n      '</li>\\n'\n    )\n  }\n\n  paragraph(text) {\n    return `<p>${text}</p>\\n`\n  }\n\n  table(header, body) {\n    return `<table>\\n<thead>\\n${header}</thead>\\n<tbody>\\n${body}</tbody>\\n</table>\\n`\n  }\n\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td'\n    const tag = flags.align\n      ? `<${type} style=\"text-align:${flags.align}\">`\n      : `<${type}>`\n    return `${tag + content}</${type}>\\n`\n  }\n\n  // span level renderer\n  strong(text) {\n    return `<strong>${text}</strong>`\n  }\n\n  em(text) {\n    return `<em>${text}</em>`\n  }\n\n  codespan(text) {\n    return `<code>${text}</code>`\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>'\n  }\n\n  del(text) {\n    return `<del>${text}</del>`\n  }\n\n  link(href, title, text) {\n    if (this.options.sanitize) {\n      let prot\n      try {\n        prot = decodeURIComponent(unescape(href))\n          .replace(/[^\\w:]/g, '')\n          .toLowerCase()\n      } catch (err) {\n        return ''\n      }\n      if (\n        // eslint-disable-next-line no-script-url\n        prot.indexOf('javascript:') === 0 ||\n        prot.indexOf('vbscript:') === 0 ||\n        prot.indexOf('data:') === 0\n      ) {\n        // eslint-disable-line no-script-url\n        return ''\n      }\n    }\n    let out = `<a href=\"${href}\"`\n    if (title) {\n      out += ` title=\"${title}\"`\n    }\n    const { linksInNewTab } = this.options\n    const targetBlank =\n      linksInNewTab === true ||\n      (typeof linksInNewTab === 'function' && linksInNewTab(href))\n    if (targetBlank) {\n      out += ` target=\"_blank\"`\n    }\n    out += `>${text}</a>`\n    return out\n  }\n\n  image(href, title, text) {\n    let out = `<img src=\"${href}\" alt=\"${text}\"`\n    if (title) {\n      out += ` title=\"${title}\"`\n    }\n    out += this.options.xhtml ? '/>' : '>'\n    return out\n  }\n\n  text(text) {\n    return text\n  }\n}\n","import Renderer from './renderer'\n\nexport default {\n  gfm: true,\n  tables: true,\n  taskLists: true,\n  dataLine: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: false,\n  sanitizer: null,\n  mangle: true,\n  smartLists: false,\n  silent: false,\n  highlight: null,\n  langPrefix: 'lang-',\n  smartypants: false,\n  headerPrefix: '',\n  renderer: new Renderer(),\n  xhtml: false\n}\n","import { noop, merge, replace } from './utils'\n\n/**\n * Inline-Level Grammar\n */\n\nconst inline = {\n  escape: /^\\\\([\\\\`*{}[\\]()#+\\-.!_>])/,\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,\n  url: noop,\n  tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^[\\]])*)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  em: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<![_*`]| {2,}\\n|$)/\n}\n\ninline._inside = /(?:\\[[^\\]]*\\]|[^[\\]]|\\](?=[^[]*\\]))*/\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/\n\ninline.link = replace(inline.link)('inside', inline._inside)(\n  'href',\n  inline._href\n)()\n\ninline.reflink = replace(inline.reflink)('inside', inline._inside)()\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline)\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\n})\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: replace(inline.escape)('])', '~|])')(),\n  url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  text: replace(inline.text)(']|', '~]|')('|', '|https?://|')()\n})\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: replace(inline.br)('{2,}', '*')(),\n  text: replace(inline.gfm.text)('{2,}', '*')()\n})\n\nexport default inline\n","import defaultOptions from './defaults'\nimport Renderer from './renderer'\nimport inlineRules from './inline-rules'\nimport { escape } from './utils'\n\nclass InlineLexer {\n  constructor(links, options = defaultOptions) {\n    this.options = options\n    this.links = links\n    this.renderer = this.options.renderer || new Renderer()\n    this.renderer.options = this.options\n\n    if (!this.links) {\n      throw new Error('Tokens array requires a `links` property.')\n    }\n\n    if (this.options.gfm) {\n      if (this.options.breaks) {\n        this.rules = inlineRules.breaks\n      } else {\n        this.rules = inlineRules.gfm\n      }\n    } else if (this.options.pedantic) {\n      this.rules = inlineRules.pedantic\n    } else {\n      this.rules = inlineRules.normal\n    }\n  }\n\n  static output(src, links, options) {\n    return new InlineLexer(links, options).output(src)\n  }\n\n  output(src) {\n    let out = ''\n    let link\n    let text\n    let href\n    let cap\n\n    while (src) {\n      // escape\n      if ((cap = this.rules.escape.exec(src))) {\n        src = src.substring(cap[0].length)\n        out += cap[1]\n        continue\n      }\n\n      // autolink\n      if ((cap = this.rules.autolink.exec(src))) {\n        src = src.substring(cap[0].length)\n        if (cap[2] === '@') {\n          text =\n            cap[1].charAt(6) === ':'\n              ? this.mangle(cap[1].substring(7))\n              : this.mangle(cap[1])\n          href = this.mangle('mailto:') + text\n        } else {\n          text = escape(cap[1])\n          href = text\n        }\n        out += this.renderer.link(href, null, text)\n        continue\n      }\n\n      // url (gfm)\n      if (!this.inLink && (cap = this.rules.url.exec(src))) {\n        src = src.substring(cap[0].length)\n        text = escape(cap[1])\n        href = text\n        out += this.renderer.link(href, null, text)\n        continue\n      }\n\n      // tag\n      if ((cap = this.rules.tag.exec(src))) {\n        if (!this.inLink && /^<a /i.test(cap[0])) {\n          this.inLink = true\n        } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n          this.inLink = false\n        }\n        src = src.substring(cap[0].length)\n        out += this.options.sanitize\n          ? this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0])\n          : cap[0]\n        continue\n      }\n\n      // link\n      if ((cap = this.rules.link.exec(src))) {\n        src = src.substring(cap[0].length)\n        this.inLink = true\n        out += this.outputLink(cap, {\n          href: cap[2],\n          title: cap[3]\n        })\n        this.inLink = false\n        continue\n      }\n\n      // reflink, nolink\n      if (\n        (cap = this.rules.reflink.exec(src)) ||\n        (cap = this.rules.nolink.exec(src))\n      ) {\n        src = src.substring(cap[0].length)\n        link = (cap[2] || cap[1]).replace(/\\s+/g, ' ')\n        link = this.links[link.toLowerCase()]\n        if (!link || !link.href) {\n          out += cap[0].charAt(0)\n          src = cap[0].substring(1) + src\n          continue\n        }\n        this.inLink = true\n        out += this.outputLink(cap, link)\n        this.inLink = false\n        continue\n      }\n\n      // strong\n      if ((cap = this.rules.strong.exec(src))) {\n        src = src.substring(cap[0].length)\n        out += this.renderer.strong(this.output(cap[2] || cap[1]))\n        continue\n      }\n\n      // em\n      if ((cap = this.rules.em.exec(src))) {\n        src = src.substring(cap[0].length)\n        out += this.renderer.em(this.output(cap[2] || cap[1]))\n        continue\n      }\n\n      // code\n      if ((cap = this.rules.code.exec(src))) {\n        src = src.substring(cap[0].length)\n        out += this.renderer.codespan(escape(cap[2], true))\n        continue\n      }\n\n      // br\n      if ((cap = this.rules.br.exec(src))) {\n        src = src.substring(cap[0].length)\n        out += this.renderer.br()\n        continue\n      }\n\n      // del (gfm)\n      if ((cap = this.rules.del.exec(src))) {\n        src = src.substring(cap[0].length)\n        out += this.renderer.del(this.output(cap[1]))\n        continue\n      }\n\n      // text\n      if ((cap = this.rules.text.exec(src))) {\n        src = src.substring(cap[0].length)\n        out += this.renderer.text(escape(this.smartypants(cap[0])))\n        continue\n      }\n\n      if (src) {\n        throw new Error('Infinite loop on byte: ' + src.charCodeAt(0))\n      }\n    }\n\n    return out\n  }\n\n  outputLink(cap, link) {\n    const href = escape(link.href)\n    const title = link.title ? escape(link.title) : null\n\n    return cap[0].charAt(0) === '!'\n      ? this.renderer.image(href, title, escape(cap[1]))\n      : this.renderer.link(href, title, this.output(cap[1]))\n  }\n\n  smartypants(text) {\n    if (!this.options.smartypants) return text\n    return (\n      text\n        // em-dashes\n        .replace(/---/g, '\\u2014')\n        // en-dashes\n        .replace(/--/g, '\\u2013')\n        // opening singles\n        .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n        // closing singles & apostrophes\n        .replace(/'/g, '\\u2019')\n        // opening doubles\n        .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n        // closing doubles\n        .replace(/\"/g, '\\u201d')\n        // ellipses\n        .replace(/\\.{3}/g, '\\u2026')\n    )\n  }\n\n  mangle(text) {\n    if (!this.options.mangle) return text\n    let out = ''\n    let i = 0\n    let ch\n\n    for (; i < text.length; i++) {\n      ch = text.charCodeAt(i)\n      if (Math.random() > 0.5) {\n        ch = 'x' + ch.toString(16)\n      }\n      out += '&#' + ch + ';'\n    }\n\n    return out\n  }\n}\n\nInlineLexer.rules = inlineRules\n\nexport default InlineLexer\n","import defaultOptions from './defaults'\nimport InlineLexer from './inline-lexer'\nimport Renderer from './renderer'\n\n/**\n * Parsing & Compiling\n */\n\nexport default class Parser {\n  constructor(options = defaultOptions) {\n    this.tokens = []\n    this.token = null\n    this.options = options\n    this.options.renderer = this.options.renderer || new Renderer()\n    this.renderer = this.options.renderer\n    this.renderer.options = this.options\n  }\n\n  static parse(src, options, renderer) {\n    return new Parser(options, renderer).parse(src)\n  }\n\n  /**\n   * Parse Loop\n   */\n\n  parse(src) {\n    this.inline = new InlineLexer(src.links, this.options, this.renderer)\n    this.tokens = src.reverse()\n\n    let out = ''\n    while (this.next()) {\n      out += this.tok()\n    }\n\n    // Remove cached headings\n    this.renderer._headings = []\n    return out\n  }\n\n  /**\n   * Next Token\n   */\n\n  next() {\n    this.token = this.tokens.pop()\n    return this.token\n  }\n\n  /**\n   * Preview Next Token\n   */\n\n  peek() {\n    return this.tokens[this.tokens.length - 1] || 0\n  }\n\n  /**\n   * Parse Text Tokens\n   */\n\n  parseText() {\n    let body = this.token.text\n\n    while (this.peek().type === 'text') {\n      body += `\\n${this.next().text}`\n    }\n\n    return this.inline.output(body)\n  }\n\n  /**\n   * Parse Current Token\n   */\n\n  tok() {\n    switch (this.token.type) {\n      case 'space': {\n        return ''\n      }\n      case 'hr': {\n        return this.renderer.hr()\n      }\n      case 'heading': {\n        return this.renderer.heading(\n          this.inline.output(this.token.text),\n          this.token.depth,\n          this.token.text\n        )\n      }\n      case 'code': {\n        return this.renderer.code(\n          this.token.text,\n          this.token.lang,\n          this.token.escaped\n        )\n      }\n      case 'table': {\n        let header = ''\n        let body = ''\n        let i\n        let row\n        let cell\n        let j\n\n        // header\n        cell = ''\n        for (i = 0; i < this.token.header.length; i++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(this.token.header[i]),\n            { header: true, align: this.token.align[i] }\n          )\n        }\n        header += this.renderer.tablerow(cell)\n\n        for (i = 0; i < this.token.cells.length; i++) {\n          row = this.token.cells[i]\n\n          cell = ''\n          for (j = 0; j < row.length; j++) {\n            cell += this.renderer.tablecell(this.inline.output(row[j]), {\n              header: false,\n              align: this.token.align[j]\n            })\n          }\n\n          body += this.renderer.tablerow(cell)\n        }\n        return this.renderer.table(header, body)\n      }\n      case 'blockquote_start': {\n        let body = ''\n\n        while (this.next().type !== 'blockquote_end') {\n          body += this.tok()\n        }\n\n        return this.renderer.blockquote(body)\n      }\n      case 'list_start': {\n        let body = ''\n        let taskList = false\n        const ordered = this.token.ordered\n\n        while (this.next().type !== 'list_end') {\n          if (this.token.checked !== undefined) {\n            taskList = true\n          }\n          body += this.tok()\n        }\n\n        return this.renderer.list(body, ordered, taskList)\n      }\n      case 'list_item_start': {\n        let body = ''\n        const checked = this.token.checked\n\n        while (this.next().type !== 'list_item_end') {\n          body += this.token.type === 'text' ? this.parseText() : this.tok()\n        }\n\n        return this.renderer.listitem(body, checked)\n      }\n      case 'loose_item_start': {\n        let body = ''\n        const checked = this.token.checked\n\n        while (this.next().type !== 'list_item_end') {\n          body += this.tok()\n        }\n\n        return this.renderer.listitem(body, checked)\n      }\n      case 'html': {\n        const html =\n          !this.token.pre && !this.options.pedantic\n            ? this.inline.output(this.token.text)\n            : this.token.text\n        return this.renderer.html(html)\n      }\n      case 'paragraph': {\n        return this.renderer.paragraph(this.inline.output(this.token.text))\n      }\n      case 'text': {\n        return this.renderer.paragraph(this.parseText())\n      }\n      default: {\n        throw new Error('Unknow type')\n      }\n    }\n  }\n}\n","import { merge, noop, replace } from './utils'\n\nconst block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\n  nptable: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/,\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,\n  table: noop,\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,\n  text: /^[^\\n]+/\n}\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/\nblock.item = replace(block.item, 'gm')(/bull/g, block.bullet)()\n\nblock.list = replace(block.list)(/bull/g, block.bullet)(\n  'hr',\n  '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))'\n)('def', '\\\\n+(?=' + block.def.source + ')')()\n\nblock.blockquote = replace(block.blockquote)('def', block.def)()\n\nblock._tag =\n  '(?!(?:' +\n  'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code' +\n  '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo' +\n  '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b'\n\nblock.html = replace(block.html)('comment', /<!--[\\s\\S]*?-->/)(\n  'closed',\n  /<(tag)[\\s\\S]+?<\\/\\1>/\n)('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)(/tag/g, block._tag)()\n\nblock.paragraph = replace(block.paragraph)('hr', block.hr)(\n  'heading',\n  block.heading\n)('lheading', block.lheading)('blockquote', block.blockquote)(\n  'tag',\n  '<' + block._tag\n)('def', block.def)()\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block)\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\s*\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/,\n  checkbox: /^\\[([ x])\\] +/\n})\n\nblock.gfm.paragraph = replace(block.paragraph)(\n  '(?!',\n  '(?!' +\n    block.gfm.fences.source.replace('\\\\1', '\\\\2') +\n    '|' +\n    block.list.source.replace('\\\\1', '\\\\3') +\n    '|'\n)()\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/\n})\n\nexport default block\n","import blockRules from './block-rules'\nimport defaultOptions from './defaults'\n\nclass Lexer {\n  constructor(options = defaultOptions) {\n    this.tokens = []\n    this.tokens.links = {}\n    this.options = options\n\n    if (this.options.gfm) {\n      if (this.options.tables) {\n        this.rules = blockRules.tables\n      } else {\n        this.rules = blockRules.gfm\n      }\n    } else {\n      this.rules = blockRules.normal\n    }\n  }\n\n  static lex(src, options) {\n    return new Lexer(options).lex(src)\n  }\n\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n')\n      .replace(/\\t/g, '    ')\n      .replace(/\\u00a0/g, ' ')\n      .replace(/\\u2424/g, '\\n')\n\n    return this.token(src, true)\n  }\n\n  token(src, top, bq) {\n    src = src.replace(/^ +$/gm, '')\n\n    let next\n    let loose\n    let cap\n    let bull\n    let b\n    let item\n    let space\n    let i\n    let l\n    let checked\n\n    while (src) {\n      // newline\n      if ((cap = this.rules.newline.exec(src))) {\n        src = src.substring(cap[0].length)\n        if (cap[0].length > 1) {\n          this.tokens.push({\n            type: 'space'\n          })\n        }\n      }\n\n      // code\n      if ((cap = this.rules.code.exec(src))) {\n        src = src.substring(cap[0].length)\n        cap = cap[0].replace(/^ {4}/gm, '')\n        this.tokens.push({\n          type: 'code',\n          text: this.options.pedantic ? cap : cap.replace(/\\n+$/, '')\n        })\n        continue\n      }\n\n      // fences (gfm)\n      if ((cap = this.rules.fences.exec(src))) {\n        src = src.substring(cap[0].length)\n        this.tokens.push({\n          type: 'code',\n          lang: cap[2],\n          text: cap[3] || ''\n        })\n        continue\n      }\n\n      // heading\n      if ((cap = this.rules.heading.exec(src))) {\n        src = src.substring(cap[0].length)\n        this.tokens.push({\n          type: 'heading',\n          depth: cap[1].length,\n          text: cap[2]\n        })\n        continue\n      }\n\n      // table no leading pipe (gfm)\n      if (top && (cap = this.rules.nptable.exec(src))) {\n        src = src.substring(cap[0].length)\n\n        item = {\n          type: 'table',\n          header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n          cells: cap[3].replace(/\\n$/, '').split('\\n')\n        }\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right'\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center'\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left'\n          } else {\n            item.align[i] = null\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = item.cells[i].split(/ *\\| */)\n        }\n\n        this.tokens.push(item)\n\n        continue\n      }\n\n      // lheading\n      if ((cap = this.rules.lheading.exec(src))) {\n        src = src.substring(cap[0].length)\n        this.tokens.push({\n          type: 'heading',\n          depth: cap[2] === '=' ? 1 : 2,\n          text: cap[1]\n        })\n        continue\n      }\n\n      // hr\n      if ((cap = this.rules.hr.exec(src))) {\n        src = src.substring(cap[0].length)\n        this.tokens.push({\n          type: 'hr'\n        })\n        continue\n      }\n\n      // blockquote\n      if ((cap = this.rules.blockquote.exec(src))) {\n        src = src.substring(cap[0].length)\n\n        this.tokens.push({\n          type: 'blockquote_start'\n        })\n\n        cap = cap[0].replace(/^ *> ?/gm, '')\n\n        // Pass `top` to keep the current\n        // \"toplevel\" state. This is exactly\n        // how markdown.pl works.\n        this.token(cap, top, true)\n\n        this.tokens.push({\n          type: 'blockquote_end'\n        })\n\n        continue\n      }\n\n      // list\n      if ((cap = this.rules.list.exec(src))) {\n        src = src.substring(cap[0].length)\n        bull = cap[2]\n\n        this.tokens.push({\n          type: 'list_start',\n          ordered: bull.length > 1\n        })\n\n        // Get each top-level item.\n        cap = cap[0].match(this.rules.item)\n\n        next = false\n        l = cap.length\n        i = 0\n\n        for (; i < l; i++) {\n          item = cap[i]\n\n          // Remove the list item's bullet\n          // so it is seen as the next token.\n          space = item.length\n          item = item.replace(/^ *([*+-]|\\d+\\.) +/, '')\n\n          if (this.options.gfm && this.options.taskLists) {\n            checked = this.rules.checkbox.exec(item)\n\n            if (checked) {\n              checked = checked[1] === 'x'\n              item = item.replace(this.rules.checkbox, '')\n            } else {\n              checked = undefined\n            }\n          }\n\n          // Outdent whatever the\n          // list item contains. Hacky.\n          if (item.indexOf('\\n ') !== -1) {\n            space -= item.length\n            item = this.options.pedantic\n              ? item.replace(/^ {1,4}/gm, '')\n              : item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n          }\n\n          // Determine whether the next list item belongs here.\n          // Backpedal if it does not belong in this list.\n          if (this.options.smartLists && i !== l - 1) {\n            b = this.rules.bullet.exec(cap[i + 1])[0]\n            if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n              src = cap.slice(i + 1).join('\\n') + src\n              i = l - 1\n            }\n          }\n\n          // Determine whether item is loose or not.\n          // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n          // for discount behavior.\n          loose = next || /\\n\\n(?!\\s*$)/.test(item)\n          if (i !== l - 1) {\n            next = item.charAt(item.length - 1) === '\\n'\n            if (!loose) loose = next\n          }\n\n          this.tokens.push({\n            checked,\n            type: loose ? 'loose_item_start' : 'list_item_start'\n          })\n\n          // Recurse.\n          this.token(item, false, bq)\n\n          this.tokens.push({\n            type: 'list_item_end'\n          })\n        }\n\n        this.tokens.push({\n          type: 'list_end'\n        })\n\n        continue\n      }\n\n      // html\n      if ((cap = this.rules.html.exec(src))) {\n        src = src.substring(cap[0].length)\n        this.tokens.push({\n          type: this.options.sanitize ? 'paragraph' : 'html',\n          pre:\n            !this.options.sanitizer &&\n            (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n          text: cap[0]\n        })\n        continue\n      }\n\n      // def\n      if (!bq && top && (cap = this.rules.def.exec(src))) {\n        src = src.substring(cap[0].length)\n        this.tokens.links[cap[1].toLowerCase()] = {\n          href: cap[2],\n          title: cap[3]\n        }\n        continue\n      }\n\n      // table (gfm)\n      if (top && (cap = this.rules.table.exec(src))) {\n        src = src.substring(cap[0].length)\n\n        item = {\n          type: 'table',\n          header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n          cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')\n        }\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right'\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center'\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left'\n          } else {\n            item.align[i] = null\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = item.cells[i]\n            .replace(/^ *\\| *| *\\| *$/g, '')\n            .split(/ *\\| */)\n        }\n\n        this.tokens.push(item)\n\n        continue\n      }\n\n      // top-level paragraph\n      if (top && (cap = this.rules.paragraph.exec(src))) {\n        src = src.substring(cap[0].length)\n        this.tokens.push({\n          type: 'paragraph',\n          text:\n            cap[1].charAt(cap[1].length - 1) === '\\n'\n              ? cap[1].slice(0, -1)\n              : cap[1]\n        })\n        continue\n      }\n\n      // text\n      if ((cap = this.rules.text.exec(src))) {\n        // Top-level should never reach here.\n        src = src.substring(cap[0].length)\n        this.tokens.push({\n          type: 'text',\n          text: cap[0]\n        })\n        continue\n      }\n\n      if (src) {\n        throw new Error('Infinite loop on byte: ' + src.charCodeAt(0))\n      }\n    }\n\n    return this.tokens\n  }\n}\n\nLexer.rules = blockRules\n\nexport default Lexer\n","import { merge, escape } from './utils'\nimport defaultOptions from './defaults'\nimport Parser from './parser'\nimport Lexer from './lexer'\nimport Renderer from './renderer'\nimport InlineLexer from './inline-lexer'\n\nfunction md(src, opt) {\n  try {\n    if (opt) opt = merge({}, defaultOptions, opt)\n    return Parser.parse(Lexer.lex(src, opt), opt)\n  } catch (err) {\n    err.message += '\\nPlease report this to https://github.com/egoist/md.'\n    if ((opt || defaultOptions).silent) {\n      return (\n        '<p>An error occurred:</p><pre>' +\n        escape(String(err.message), true) +\n        '</pre>'\n      )\n    }\n    throw err\n  }\n}\n\nmd.Renderer = Renderer\nmd.Parser = Parser\nmd.Lexer = Lexer\nmd.InlineLexer = InlineLexer\n\nexport default md\n"],"names":["merge","obj","target","key","i","arguments","length","Object","prototype","hasOwnProperty","call","noop","escape","html","encode","replace","regex","opt","source","self","name","val","RegExp","exec","module","input","toLowerCase","highlightLinesRe","Renderer","options","_headings","code","lang","escaped","dataLine","this","test","substr","indexOf","highlight","out","blockquote","quote","heading","text","level","raw","slug","slugo","count","filter","h","push","hr","xhtml","list","body","ordered","taskList","type","listitem","checked","undefined","paragraph","table","header","tablerow","content","tablecell","flags","align","strong","em","codespan","br","del","link","href","title","sanitize","prot","decodeURIComponent","_","n","charAt","String","fromCharCode","parseInt","substring","Number","err","linksInNewTab","image","inline","_inside","_href","reflink","normal","pedantic","gfm","breaks","InlineLexer","links","defaultOptions","renderer","Error","rules","inlineRules","output","src","cap","autolink","mangle","inLink","url","tag","sanitizer","outputLink","nolink","smartypants","charCodeAt","ch","Math","random","toString","Parser","tokens","token","parse","reverse","next","tok","pop","peek","parseText","depth","row","cell","j","cells","pre","const","block","item","bullet","def","_tag","lheading","fences","tables","Lexer","blockRules","md","lex","message","silent","top","bq","loose","bull","b","space","l","newline","nptable","split","match","taskLists","checkbox","smartLists","slice","join"],"mappings":"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"}